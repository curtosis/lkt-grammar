;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Lakota
;;; created at:
;;;     Sat Apr 27 04:28:13 UTC 2013
;;; based on Matrix customization system version of:
;;;     Fri Apr 26 22:55:12 UTC 2013
;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ COUNT bool,
    AUX bool,
    FORM form ].

basic-head-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.OPT - ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.OPT -,
                                MC #mc ] ].

inflected :+ [ TRA-OBJ-1PER-FLAG luk,
    ITRS-PAT-SUBJ-POS-FLAG luk,
    TRA-PAT-OBJ-POS-FLAG luk,
    TRA-OBJ-2PER-FLAG luk,
    TRA-AGT-SUBJ-POS-FLAG luk ].

infl-satisfied :+ [ TRA-OBJ-1PER-FLAG na-or-+,
    ITRS-PAT-SUBJ-POS-FLAG na-or-+,
    TRA-PAT-OBJ-POS-FLAG na-or-+,
    TRA-OBJ-2PER-FLAG na-or-+,
    TRA-AGT-SUBJ-POS-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number,
    GEND gender ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
sg := number.
pl := number.
du := number.
dist := pl.
coll := pl.

;;; Gender

gender := *top*.
animate := gender.
inanimate := gender.
human := animate.
nonhuman := animate.

;;; Form

form := *top*.
;nonfinite := form.
finite := form.
irrealis-form := finite & nonfinite+irrealis-form.
negative-form := finite & nonfinite+irrealis-form+negative-form.
potential-form := finite.
quotative-form := finite.
nonfinite := nonfinite+irrealis-form.
nonfinite+irrealis-form+negative-form := form.
nonfinite+irrealis-form := nonfinite+irrealis-form+negative-form.

;;; Aspect

continuative := aspect.

;;; Mood

irrealis := mood.
resemblative := mood.
quotative := mood.
apparitional := mood.
iterative := mood.
potential := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

head :+ [ PRONOUN bool ].

noun-super-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < > ]].

noun-lex := noun-super-lex &
  [ SYNSEM.LOCAL.CAT[ HEAD [ PRONOUN - ],
		      VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] > ] ],
    ARG-ST < #spr >].

noun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun-mass-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.COUNT - ].

noun-nonhum-noun-lex := noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND nonhuman ].

noun-inanim-noun-lex := noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

noun-hum-noun-lex := noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND human ].

pron-lex := noun-super-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRONOUN +,
		   CONT [ RELS <! [ PRED "pronoun_n_rel" ] !>,
		  	   HOOK.INDEX.PNG.PER 3rd ] ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

impersonal-verb-lex := verb-lex & basic-verb-lex & expl-arg-only-lex-item & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SUBJ < >,
                               SPR < >,
                               SPEC < >,
                               COMPS < > ] ] ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].


transitive-verb-lex := main-verb-lex & transitive-lex-item & cont-pos-rule-dtr & tra-agt-subj-pos-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

ditrans-verb-lex := ditransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < #comp1, #comp2 >,
			   SUBJ < #subj > ],
    ARG-ST < #subj,
	     #comp1 &
	     [ LOCAL.CAT.HEAD noun ],
	     #comp2 &
	     [ LOCAL.CAT.HEAD comp ] >].

itr-active-verb-lex := intransitive-verb-lex & cont-pos-rule-dtr & tra-agt-subj-pos-rule-dtr &
  [ INFLECTED.TRA-AGT-SUBJ-POS-FLAG - ].

itr-stative-verb-lex := intransitive-verb-lex & cont-pos-rule-dtr &
  [ INFLECTED.ITRS-PAT-SUBJ-POS-FLAG - ].

tra-pat-obj-dtr := lex-item.

active-verb-lex := tra-pat-obj-dtr &
  [ INFLECTED [ TRA-PAT-OBJ-POS-FLAG -,
                TRA-AGT-SUBJ-POS-FLAG - ] ].

tr-active-verb-lex := transitive-verb-lex & active-verb-lex.

alt-norm-sem-lex-item := norm-hook-lex-item & icons-lex-item.


alt-basic-verb-lex := alt-norm-sem-lex-item & 
  [ SYNSEM [ LOCAL [ CAT.HEAD verb,
		     CONT.HOOK [ INDEX #index,
				 ICONS-KEY.CLAUSE #index,
				 CLAUSE-KEY #index ] ],
	     LKEYS.KEYREL event-relation ] ].

alt-main-verb-lex := verb-lex & alt-basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

tr-np-copula-verb-lex := alt-main-verb-lex & transitive-lex-item & cont-pos-rule-dtr & tra-agt-subj-pos-rule-dtr &
  [ SYNSEM.LOCAL [ CAT [ HEAD verb,
		         VAL [ COMPS < #comps >,
			       SUBJ < [ LOCAL [ CONT.HOOK.INDEX #arg1 ] ] > ] ],
    		   CONT [ HOOK [ LTOP #ltop,
		    		 INDEX #index,
		    		 XARG #arg1 ],
         		  RELS <! arg12-ev-relation &
		   		  [ PRED "_be_v_id_rel",
		     		    LBL #ltop,
		     		    ARG0 #index,
		     		    ARG1 #arg1,
		     		    ARG2 #arg2 ],
		   		  quant-relation &
		   		  [ PRED "exist_q_rel",
		     		    ARG0 #arg2 ] !> ] ],
     ARG-ST < [ LOCAL [ CAT [ HEAD noun ]]],
                #comps &
                [ LOCAL.CAT [ VAL [ SPR cons,
                                    COMPS < > ],
                              HEAD noun ] ] > ]. 

locative-verb-lex := verb-lex & trans-first-arg-raising-lex-item-2 & tra-agt-subj-pos-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD adp ] ] > ].

inanim-loc-verb-lex := locative-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

anim-loc-verb-lex := locative-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND animate ].

plain-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

clausal-verb-lex := main-verb-lex & tra-agt-subj-pos-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF prop-or-ques ] ].

clausal-trans-verb-lex := clausal-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS [ FIRST #comp &
                                         [ LOCAL.CAT.HEAD comp ],
                                     REST <>],
    ARG-ST < [ ], #comp >].

clausal-ditrans-verb-lex := clausal-verb-lex & clausal-third-arg-ditrans-lex-item & active-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < #comp1, #comp2 >,
			   SUBJ < #subj > ],
    ARG-ST < #subj,
         #comp1 &
         [ LOCAL.CAT.HEAD noun ],
         #comp2 &
         [ LOCAL.CAT.HEAD comp ] >].

prop-clausal-verb-lex := clausal-trans-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop ].

ques-clausal-verb-lex := clausal-ditrans-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [ ] >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.


agr-subj-raise-aux-with-pred := subj-raise-aux-with-pred & tra-agt-subj-pos-rule-dtr & 
  [ ARG-ST < [ ], 
             [ LOCAL.CAT [HEAD verb & 
                          [ AUX - ] ] ] > ].

neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM negative-form,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite+irrealis-form ] ].


subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item.

irrealis-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM irrealis-form,
                       VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM nonfinite,
                                               CONT.HOOK.INDEX.E.MOOD irrealis ] ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

potential-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM potential-form,
                       VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM nonfinite+irrealis-form+negative-form,
                                               CONT.HOOK.INDEX.E.MOOD potential ] ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

quotative-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM quotative-form,
                       VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM nonfinite+irrealis-form+negative-form,
                                               CONT.HOOK.INDEX.E.MOOD quotative ] ] ].

;;; Adverbs


sentence-attach-adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                    VAL [ SUBJ < >,
                                                          COMPS < > ]]] >,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ],
                           POSTHEAD -]]]].

verb-attach-adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD verb ],
                                        LIGHT + ] >,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ],
                           POSTHEAD -]]]].

scopal-adverb-lex := basic-scopal-adverb-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD verb ] ] >,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < [ LOCAL.CAT [ HEAD noun ,
                                                       VAL.SPR < > ]] >,
                                 SPEC < > ],
                            POSTHEAD -]]]].

;; some adverbs attach to verbs but modify nouns; use the index of their
;; complement as ARG1.
intersective-mod-comp-lex := no-hcons-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL intersective-mod &
                                          [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #arg1 ] > ]] >,
             LKEYS.KEYREL.ARG1 #arg1 ] ].


comp-mod-adverb-lex := basic-adverb-lex & intersective-mod-comp-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                    VAL.COMPS < [ LOCAL.CAT [ HEAD noun,
                                                                              VAL.SPR < > ] ] > ] ] >,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ],
                           POSTHEAD -]]]].


adverbialized-stative-lex := comp-mod-adverb-lex.


;;; Adpositions

postposition-lex := basic-int-mod-adposition-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD adp &
		       	    [ MOD < [ LOCAL [ CAT.HEAD noun,
					      CONT.HOOK.INDEX #arg ] ] > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             SPEC < >,
			     COMPS < #comp > ],
		       POSTHEAD + ], 
		    CONT.HOOK.XARG #arg ],
    ARG-ST < #comp &
	     [ LOCAL.CAT [ HEAD noun,
                           VAL.SPR < > ],
                         OPT - ] > ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

def-determiner-lex := determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX [ COG-ST uniq+fam+act ]]].

indef-determiner-lex := determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX [ COG-ST type-id ]]].

indef-sg-real-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

indef-sg-hyp-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

indef-pl-real-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

indef-pl-hyp-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

indef-pl-neg-hum-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                                                GEND human ] ].

indef-pl-neg-nonhum-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                                                GEND nonhuman ] ].

indef-pl-neg-inanim-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                                                GEND inanimate ] ].

indef-neg-noncount-determiner-lex := indef-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.NUM pl,
                                            CAT.HEAD.COUNT - ] ].

def-pst-determiner-lex := def-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.ICONS-KEY contrast-topic ].

;;; Demonstratives

demonstrative_a_rel := predsort.
proximal+dem_a_rel := demonstrative_a_rel. ; close to speaker
distal+dem_a_rel := demonstrative_a_rel.   ; away from speaker
mid+dem_a_rel := distal+dem_a_rel.         ; away, but not very far away
far+dem_a_rel := distal+dem_a_rel.         ; very far away

;;; Demonstrative Adjectives
demonstrative-lex := basic-adjective-lex & intersective-mod-lex &
              norm-ltop-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL [ CAT [ HEAD noun ],
                                                   CONT.HOOK.INDEX [ COG-ST activ+fam,
                                                               PNG.NUM #num ]]]>,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ]],
                     CONT.HOOK.INDEX.PNG.NUM #num ],
             LKEYS.KEYREL.PRED demonstrative_a_rel ]].

pre-dem-lex := demonstrative-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ VAL.SPR < [ OPT - ] > ]] >,
                           POSTHEAD - ]]]].

post-dem-lex := demonstrative-lex &
  [ SYNSEM [ LOCAL [ CAT [ POSTHEAD + ]]]].

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [
                       HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ MC +,
                           HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

embed-qpart-lex-item := qpart-lex-item &
  [ SYNSEM.LOCAL.CAT.MC - ].

; Subtype for declarative complementizer. Constrain SF to prop.

ppart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CAT.MC -,
                   CONT.HOOK.INDEX.SF prop ]].

;; NPs as predicates
n-bar-predicate-rule := unary-phrase & nocoord &
  [ SYNSEM.LOCAL.CAT [ MC -,
		       HEAD verb & [ MOD < > ],
		       VAL [ SPR < >,
		 	     COMPS < >,
			     SUBJ < [ LOCAL [ CONT.HOOK.INDEX #arg1,
					      CAT [ HEAD noun,
						  VAL.SPR < > ] ] ] > ] ],
    C-CONT [ HOOK [ LTOP #ltop,
		    INDEX #index,
		    XARG #arg1 ],
	     RELS <! arg12-ev-relation &
		   [ PRED "_be_v_id_rel",
		     LBL #ltop,
		     ARG0 #index,
		     ARG1 #arg1,
		     ARG2 #arg2 ] !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun &
				       [ PRONOUN - ],
				  VAL.SPR < > ],
			    CONT.HOOK [ INDEX #arg2 ] ] ] > ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

tra-agt-subj-pos-rule-dtr := word-or-lexrule.
cont-pos-rule-dtr := word-or-lexrule.

;;; Lexical rule types

itrs-pat-subj-pos-lex-rule-super := add-only-no-ccont-rule & cont-pos-rule-dtr &
  [ INFLECTED [ ITRS-PAT-SUBJ-POS-FLAG +,
                TRA-PAT-OBJ-POS-FLAG #tra-pat-obj-pos,
                TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-AGT-SUBJ-POS-FLAG #tra-agt-subj-pos,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR itr-stative-verb-lex &
        [ INFLECTED [ TRA-PAT-OBJ-POS-FLAG #tra-pat-obj-pos,
                      TRA-OBJ-1PER-FLAG #tra-obj-1per,
                      TRA-AGT-SUBJ-POS-FLAG #tra-agt-subj-pos,
                      TRA-OBJ-2PER-FLAG #tra-obj-2per ] ] ].

itrs-subj-pat-lex-rule := itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST [ OPT +,
    LOCAL.CONT.HOOK.INDEX [ COG-ST activ-or-more, SPECI + ] ] ].

itrs-subj-1per-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

itrs-subj-sg-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

itrs-subj-1sg-pat-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-1per-lex-rule & itrs-subj-pat-lex-rule & itrs-subj-sg-lex-rule.

itrs-subj-2per-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

itrs-subj-2sg-pat-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-2per-lex-rule & itrs-subj-pat-lex-rule & itrs-subj-sg-lex-rule.

itrs-subj-3per-lex-rule := itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

itrs-subj-3sg-pat-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-3per-lex-rule & itrs-subj-pat-lex-rule & itrs-subj-sg-lex-rule.

itrs-subj-anim-lex-rule := itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND animate ].

itrs-subj-du-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM du ].

itrs-subj-1du-pat-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-1per-lex-rule & itrs-subj-du-lex-rule & itrs-subj-pat-lex-rule.

itrs-subj-pl-lex-rule := itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

itrs-subj-1pl-pat-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-1per-lex-rule & itrs-subj-pat-lex-rule & itrs-subj-pl-lex-rule.

itrs-subj-2pl-pat-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-2per-lex-rule & itrs-subj-pat-lex-rule & itrs-subj-pl-lex-rule.

itrs-subj-3pl-pat-morph-lex-rule := itrs-subj-3per-lex-rule & itrs-subj-pat-lex-rule & itrs-subj-pl-lex-rule.

itrs-subj-inanim-lex-rule := const-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

itrs-subj-3pl-pat-inanim-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-3pl-pat-morph-lex-rule & itrs-subj-inanim-lex-rule.

itrs-subj-nonhum-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND nonhuman ].

itrs-subj-3pl-pat-nonhuman-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-3per-lex-rule & itrs-subj-nonhum-lex-rule & itrs-subj-pat-lex-rule & itrs-subj-pl-lex-rule.

itrs-subj-hum-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND human ].

itrs-subj-coll-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM coll ].

itrs-subj-dist-lex-rule := infl-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM dist ].

itrs-subj-3coll-pat-human-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-3pl-pat-morph-lex-rule & itrs-subj-coll-lex-rule & itrs-subj-hum-lex-rule.

itrs-subj-3dist-pat-human-morph-lex-rule := itrs-morph-pos-lex-rule & itrs-subj-3pl-pat-morph-lex-rule & itrs-subj-dist-lex-rule & itrs-subj-hum-lex-rule.

itrs-morph-pos-lex-rule := itrs-pat-subj-pos-lex-rule-super.

itrs-pat-subj-pos-no-drop-lex-rule := const-lex-rule & itrs-pat-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.OPT - ].

tra-pat-obj-pos-lex-rule-super := add-only-no-ccont-rule & cont-pos-rule-dtr & tra-agt-subj-pos-rule-dtr &
  [ INFLECTED [ TRA-PAT-OBJ-POS-FLAG +,
                ITRS-PAT-SUBJ-POS-FLAG #itrs-pat-subj-pos,
                TRA-AGT-SUBJ-POS-FLAG #tra-agt-subj-pos ],
    DTR  tra-pat-obj-dtr &
        [ INFLECTED [ ITRS-PAT-SUBJ-POS-FLAG #itrs-pat-subj-pos,
                      TRA-AGT-SUBJ-POS-FLAG #tra-agt-subj-pos ] ] ].

tra-obj-1per-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG +,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED.TRA-OBJ-2PER-FLAG #tra-obj-2per,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

tra-obj-2per-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-2PER-FLAG +,
                TRA-OBJ-1PER-FLAG #tra-obj-1per ],
    DTR.INFLECTED.TRA-OBJ-1PER-FLAG #tra-obj-1per,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

tra-obj-pat-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ OPT +,
      LOCAL.CONT.HOOK.INDEX [ COG-ST activ-or-more, SPECI + ] ] ].

tra-obj-3per-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

tra-obj-pl-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

tra-obj-sg-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

tra-obj-inanim-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

tra-obj-anim-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND animate ].

tra-pat-obj-pos-no-drop-lex-rule := const-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

tra-pat-morph-pos-lex-rule := infl-lex-rule & tra-pat-obj-pos-lex-rule-super &
  [ INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per ],
    DTR.INFLECTED [ TRA-OBJ-1PER-FLAG #tra-obj-1per,
                    TRA-OBJ-2PER-FLAG #tra-obj-2per ] ].

tra-obj-1sg-pat-morph-lex-rule := tra-obj-1per-lex-rule & tra-obj-pat-lex-rule & tra-obj-sg-lex-rule & tra-pat-morph-pos-lex-rule.

tra-obj-2sg-pat-morph-lex-rule := tra-obj-2per-lex-rule & tra-obj-pat-lex-rule & tra-obj-sg-lex-rule & tra-pat-morph-pos-lex-rule.

tra-obj-3sg-pat-morph-lex-rule := tra-obj-3per-lex-rule & tra-obj-pat-lex-rule & tra-obj-sg-lex-rule & tra-pat-morph-pos-lex-rule.

tra-obj-1pl-pat-morph-lex-rule := tra-obj-1per-lex-rule & tra-obj-pat-lex-rule & tra-obj-pl-lex-rule & tra-pat-morph-pos-lex-rule.

tra-obj-2pl-pat-morph-lex-rule := tra-obj-2per-lex-rule & tra-obj-pat-lex-rule & tra-obj-pl-lex-rule & tra-pat-morph-pos-lex-rule.

tra-obj-3pl-pat-anim-morph-lex-rule := tra-obj-3per-lex-rule & tra-obj-anim-lex-rule & tra-obj-pat-lex-rule & tra-obj-pl-lex-rule & tra-pat-morph-pos-lex-rule.

tra-obj-3pl-pat-inanim-morph-lex-rule := tra-obj-3per-lex-rule & tra-obj-inanim-lex-rule & tra-obj-pat-lex-rule & tra-obj-pl-lex-rule & tra-pat-morph-pos-lex-rule.

tra-agt-subj-pos-lex-rule-super := add-only-no-ccont-rule & cont-pos-rule-dtr &
  [ INFLECTED [ TRA-AGT-SUBJ-POS-FLAG +,
                TRA-PAT-OBJ-POS-FLAG #tra-pat-obj-pos,
                TRA-OBJ-1PER-FLAG #tra-obj-1per,
                TRA-OBJ-2PER-FLAG #tra-obj-2per,
                ITRS-PAT-SUBJ-POS-FLAG #itrs-pat-subj-pos ],
    DTR tra-agt-subj-pos-rule-dtr &
        [ INFLECTED [ TRA-PAT-OBJ-POS-FLAG #tra-pat-obj-pos,
                      TRA-OBJ-1PER-FLAG #tra-obj-1per,
                      TRA-OBJ-2PER-FLAG #tra-obj-2per,
                      ITRS-PAT-SUBJ-POS-FLAG #itrs-pat-subj-pos ] ] ].

tra-subj-du-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ DTR.INFLECTED.TRA-OBJ-2PER-FLAG na,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM du ].

tra-subj-1per-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ DTR.INFLECTED.TRA-OBJ-1PER-FLAG na,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

tra-subj-agt-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST [ OPT +,
      LOCAL.CONT.HOOK.INDEX [ COG-ST activ-or-more, SPECI + ] ] ].

tra-subj-2per-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

tra-subj-3per-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

tra-subj-sg-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

tra-subj-pl-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

tra-subj-dist-lex-rule := tra-subj-pl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM dist ].

tra-subj-coll-lex-rule := tra-subj-pl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM coll ].

tra-subj-1sg-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-1per-lex-rule & tra-subj-agt-lex-rule & tra-subj-sg-lex-rule.

tra-subj-2sg-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-2per-lex-rule & tra-subj-agt-lex-rule & tra-subj-sg-lex-rule.

tra-subj-3sg-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-3per-lex-rule & tra-subj-agt-lex-rule & tra-subj-sg-lex-rule.

tra-subj-1du-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-1per-lex-rule & tra-subj-agt-lex-rule & tra-subj-du-lex-rule.

tra-subj-1pl-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-1per-lex-rule & tra-subj-agt-lex-rule & tra-subj-pl-lex-rule.

tra-subj-2pl-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-2per-lex-rule & tra-subj-agt-lex-rule & tra-subj-pl-lex-rule.

tra-subj-3dist-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-3per-lex-rule & tra-subj-agt-lex-rule & tra-subj-dist-lex-rule.

tra-subj-3coll-agt-morph-lex-rule := tra-agt-morph-pos-lex-rule & tra-subj-3per-lex-rule & tra-subj-agt-lex-rule & tra-subj-coll-lex-rule.

tra-agt-morph-pos-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super.

tra-agt-subj-pos-no-drop-lex-rule := const-lex-rule & tra-agt-subj-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.OPT - ].

cont-pos-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR cont-pos-rule-dtr &
        [ INFLECTED #infl ] ].

cont-pos-morph-lex-rule := cont-pos-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT continuative ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

light-change-only-lex-rule := same-local-lex-rule &
                              same-non-local-lex-rule &
                              same-modified-lex-rule &
                              no-ccont-lex-rule.

impersonal-vp-phrase := light-change-only-lex-rule & head-only & declarative-clause &
  [ INFLECTED #infl,
     SYNSEM.LIGHT -,
     DTR impersonal-verb-lex & 
        [ SYNSEM.LIGHT +,
          INFLECTED #infl & infl-satisfied ] ].
                  

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
