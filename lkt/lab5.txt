Lab 5
Curtis/McHugh
Lakota [lkt]
2013.05.03

# Adjectival and adverbial modifiers

## Adjectives

Lakota does not have adjectives; the role of adjectives is played
instead by stative verbs. For example:

(118)
wóyute wašté   uŋyútapi
wóyute wašté   uŋ-yútA-pi
wóyute wašté   yútA-1PlAgt
food   be_good eat-1PL.AGT
'We ate good food.'

Implementing stative verbs as relative phrase heads was beyond the scope
of this lab, so we did not address them.

## Adverbs

### Adverbs of manner

Adverbs in Lakota fall into several different classes. The simplest are
adverbs of manner, which attach to verbs and directly modify them:

(124)
ȟ'aŋhíya yápi
ȟ'aŋhíya yÁ-pi
ȟ'aŋhíya yÁ-3PlAgt
slowly  go_there-3PL.AGT
'they went slowly'

(125)
huhú kiŋ taŋyéla yasmí
huhú kiŋ taŋyéla yasmí
huhú kiŋ taŋyéla yasmí-3SgAgt
bone DEF well gnaw_clean-3SG.AGT
'he completely gnawed the bones clean'

These adverbs can also attach to full sentences, usually for emphasis:

taŋyéla huhú kiŋ yasmi
taŋyéla huhú kiŋ yasmi
taŋyéla huhú kiŋ yasmi-3SgAgt
well bone DEF gnaw_clean-3SG.AGT
'he COMPLETELY gnawed the bones clean'

To implement these adverbs we created two lexical types,
sentence-attach-adverb-lex and verb-attach-adverb-lex. The definition
for verb-attach-adverb-lex is:

  verb-attach-adverb-lex := basic-adverb-lex & intersective-mod-lex &
    [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD verb ],
                                          LIGHT + ] >,
                             VAL [ SPR < >,
                                   SUBJ < >,
                                   COMPS < >,
                                   SPEC < > ],
                             POSTHEAD -]]]].

This constrains these adverbs to modify [ HEAD verb ] phrases, and the [
LIGHT + ] constraint selects for lexical Vs. The VAL features for these
adverbs are all empty, and [ POSTHEAD - ] constrains them to appear
before the head they modify. Inherited from intersective-mod-lex is the
constraint:

 [ SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CONT.HOOK.INDEX #arg1 ] >,
            LKEYS.KEYREL.ARG1 #arg1 ] ]

which coindexes the ARG1 of the semantic relation contributed by the
adverb with the hook index of the [ HEAD verb ] it modifies.

sentence-attach-adverb-lex is defined nearly identically, except that it
constrains its modificand to be an S ([ LOCAL.CAT.VAL [ SUBJ < >, COMPS < > ] ]).

As our implementations of other phenomena required instantiating both
adj-head-int-phrase and head-adj-int-phrase, both these lexical types
require an explicit [ POSTHEAD - ] constraint. Each adverb that falls into
this category then has two lexicon entries: one for each lexical type.

The combination of these two lexical types results in slight
overgeneration, in that in some instances (as in example 121 above)
either the verb or sentence attachment is licensed.

### Adjectival adverbs

A more complicated class of adverbs act similarly to adjectives, in that
they modify nouns, but attach to verbal projections. For example:

(127)
wakhéya waŋ skayéla églepi
wakhéya waŋ skayéla égle-pi
wakhéya waŋ skayéla égle-3PlAgt.
tent    IDF whitely put_up_vertical-3PL.AGT
'they put up a white tent'

N.B. 'whitely' here is perhaps better glossed as 'white-ish'.

These adverbs are almost exclusively adverbialized stative verbs, and
are most commonly found in the case (as this example) of stative verbs
representing colors.

To implement these adjectival adverbs, we needed to replace
intersective-mod-lex with a new type, intersective-mod-comp-lex. Instead
of coindexing the adverb's ARG1 with the HOOK.INDEX of the verb, it
coindexes with the HOOK.INDEX of the modificand's complement:

  intersective-mod-comp-lex := no-hcons-lex-item &
    [ SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #arg1 ] > ] >,
               LKEYS.KEYREL.ARG1 #arg1 ] ].

This is then inherited by comp-mod-adverb-lex, which is defined
similarly to verb-attach-adverb-lex, but constrained to require its
modificand to have a noun complement, which is then also identified with
the complement of the adverb. This complement is constrained by
comp-mod-adverb-lex to be:

  [ SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL.COMPS < [ LOCAL.CAT [ HEAD noun,
                                                                          VAL.SPR < > ] ] > ] ] > ] ]

comp-mod-adverb-lex has the same LOCAL.CAT.VAL and LOCAL.CAT.POSTHEAD
constraints as verb-attach-adverb-lex and sentence-attach-adverb-lex.


## Scopal adverbs

A third kind of adverb is the scopal adverbs, such as adverbs of location. For example:

(not in testsuite yet)
ȟé       kiŋ itókaǧataŋhaŋ makȟóčhe yaŋká
mountain DEF south_of      country  sit
'to the south of the mountains lies the country'

In these forms, the adverb heads a phrase which then modifies the
verb. In this example, itókaǧataŋhaŋ takes 'ȟé kiŋ' as a complement and
modifies yaŋká.

Although it wasn't required for this lab, in order to better understand
these different classes of adverbs we attempted to implement scopal
adverbs. To do so we implemented scopal-adverb-lex, which inherits from
basic-scopal-adverb-lex and adds the constraints that its modificand
must be [ HEAD verb ] and its complement must be [ HEAD noun,
VAL.SPR < > ]:

  scopal-adverb-lex := basic-scopal-adverb-lex &
    [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD verb ] ] >,
                             VAL [ SPR < >,
                                   SUBJ < >,
                                   COMPS < [ LOCAL.CAT [ HEAD noun ,
                                                         VAL.SPR < > ]] >,
                                   SPEC < > ],
                              POSTHEAD -]]]].

Although this implementation parses, the MRS doesn't appear to connect
the _mountain_n_rel to the situation at all. As this was purely
investigational work at this point, we didn't pursue further resolution
of this anomaly.


# Agreement between adjectives and head nouns

Lakota does not exhibit agreement between adjectives and head nouns.


# Demonstratives and markers of definiteness

In Lakota, demonstratives differentiate three numbers (singular, dual,
and plural) and three relative positions (near the speaker, near the
listener, and distant). Demonstratives may precede or follow the
NP. They can co-occur with determiners, but the determiner may only be
dropped when the demonstrative follows the NP, and not when it precedes it:

(80)
hé igmú kiŋ wakhúwa
hé igmú kiŋ wa-khúwa
hé igmú kiŋ khuwá-1SgAgt
DEM cat DEF chase-1SG.AGT
'I chase that cat'

(83)
igmú kiŋ hé wakhúwa
igmú kiŋ hé wa-khúwa
igmú kiŋ hé khuwá-1SgAgt
cat DEF DEM chase-1SG.AGT
'I chase that cat'

(85)
igmú hé wakhúwa
igmú hé wa-khúwa
igmú hé khuwá-1SgAgt
cat DEM chase-1SG.AGT
'I chase that cat'

The first changes we made to the grammar were to mark our determiners
for definiteness via the COG-ST feature:

  def-determiner-lex := determiner-lex &
    [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX [ COG-ST uniq+fam+act ]]].

  indef-determiner-lex := determiner-lex &
    [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX [ COG-ST type-id ]]].

Previously there was no supertype for indefinite determiners, so that
was created. We also changed the def-st-determiner lex to inherit from
def-determiner-lex instead of determiner-lex to constrain the COG-ST
feature value.

As demonstratives can co-occur with determiners, we felt the
demonstrative adjective analysis was most appropriate for Lakota. We
had not previously needed a adjective-lex type, so we created a
demonstrative type that inherited directly from the supertypes as it
would have .

demonstrative-lex := basic-adjective-lex & intersective-mod-lex &
              norm-ltop-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL [ CAT [ HEAD noun ],
                                                      CONT.HOOK.INDEX [ COG-ST activ+fam,
                                                                       PNG.NUM #num ]]]>,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ]],
                     CONT.HOOK.INDEX.PNG.NUM #num ],
             LKEYS.KEYREL.PRED demonstrative_a_rel ]].

This type was constrained for number agreement with the [ HEAD noun ]
modificand. Because the demonstratives are able to appear in two
positions, we created two subtypes, one for each position relative to the NP:

  pre-dem-lex := demonstrative-lex &
    [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ VAL.SPR < [ OPT - ] > ]] >,
                           POSTHEAD - ]]]].

  post-dem-lex := demonstrative-lex &
    [ SYNSEM [ LOCAL [ CAT [ POSTHEAD + ]]]].

As the determiner is by default optional in Lakota, the modifier specifier
OPT was constrained to - to prevent dropping when the demonstrative
appears before the noun phrase.

The only problem that we are seeing with this implementation is that we are
overgenerating, allowing the demonstrative to appear between the noun
and its determiner (described below).


# Argument optionality

To handle Lakota pronomial affixes, we had implemented argument
optionality in a prior lab. The syntax has been correct and remains so
with the changes from this lab. Therefore, we concerned ourselves
primarily with whether the semantics of dropped arguments were being
correctly generated.

We noted that the Matrix assumes that dropped subjects are always
[ COG-ST in-foc ]. This is not the case for Lakota; affixes are not
markers for arg-drop but can serve as overt subject/object themselves.
For example:

(29)
mayákhuwapi
ma-ya-khuwá-pi
khuwá-1SgPat-2PlAgt
chase-1SG.PAT-2PL.AGT
'You (pl) chase me'

This is even true when there are no overt affixes:

(38)
khuwá
Ø-Ø-khuwá
khuwá-3SgPat-3SgAgt
chase-3SG.PAT-3SG.AGT
'He/she/It chases it'

In order to implement the cognitive status correctly, we modified the
lexical rules for the affixes. For example,

  tra-subj-agt-lex-rule := infl-lex-rule & tra-agt-subj-pos-lex-rule-super &
    [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST [ OPT +,
                                        LOCAL.CONT.HOOK.INDEX [ COG-ST activ-or-more,
                                                                SPECI + ] ] ].

sets [ COG-ST activ-or more ] and [ SPECI + ] for transitive agentive
subject affixes in the absence of an overt subject. Similar rule
adjustments were made for the other affix classes.


# Anything else fixed

The major outstanding issue from our previous iteration was proper ordering of postverbal enclitics.

For example:

(72)
igmú kiŋ sápa kta šni séče
igmú kiŋ sápA ktA šni séčA
igmú kiŋ sápA ktA šni séčA
cat DEF be_black IRR NEG POSSBL
'The cat probably won't be black'

but

(73)
*igmú kiŋ sápa kta séča šni
igmú kiŋ sápA ktA séčA šni
igmú kiŋ sápA ktA séčA šni
cat DEF be_black IRR POSSBL NEG
'The cat probably won't be black'

We implemented the enclitics as AUX verbs, with different input FORM
classes controlling the licensed orderings. In our original
customization script, we had properly created irrealis-form,
negative-form, quotative-form, and potential-form as subtypes of
finite. However, we had inadvertently set the input on all the enclitics
to be 'finite,nonfinite,irrealis' and similar. The result was that the
lexical types for the AUXes were created with a constraint:

  neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM negative-form,
                       VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM form ] ].

That is, no constraint on FORM. We removed the erroneous inclusion of
both finite and nonfinite, and revised the constraints to include only
nonfinite (representing the regular verb) or the appropriate subclasses
of finite. For example, the neg-aux-lex type above is properly expressed as:

  neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM negative-form,
                       VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.FORM nonfinite+irrealis-form ] ] ].

The orderings of AUX-verb enclitics now works as expected.

# Current coverage

Our current performance on the test suite is 77.9%, vs. 72.1% in our
baseline from last week's lab. Our overgeneration also improved to 1.9%
from 3.7% baseline.

Our one negative example that parses is #82:

igmú hé kiŋ khuwá-1SgAgt

The challenge here is that head-adj-int allows the demonstrative hé to
attach to the noun igmú inside the determiner kiŋ. We have as yet been
unable to constrain this from occurring.

The other three overgenerations are unproblematic:

- one results from ambiguity whether bare-np applies before or after
  head-adj-int

- one is a legitimate coordination ambiguity ('I sat down and ate'
  vs. 'I sat down and I ate')

- one results from both sentence-attach-adverb-lex and verb-attach-adverb-lex
  being applicable

# Corpus

The corpus we collected is from the script for Episode 1 of the Lakota
Berenstain Bears (http://lakotabears.org). We are using just the first
page of dialog, split into 21 constituent sentences and formatted into
the translit-seg format our testsuite uses (which is the same as the FST
upper-side language). Without adding any new lexical entries, none of
the corpus items parses with the current grammar.
