;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of English
;;; created at:
;;;     Fri Feb 26 04:53:14 UTC 2010
;;; based on Matrix customization system version of:
;;;     Fri Jan 29 09:38:10 UTC 2010
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

det :+ [ COUNT bool ].

head :+ [ AUX bool,
    FORM form ].

+nvcdmo :+ [ MOD < > ].

individual :+ [ INFO-STR info-str ].

info-str := avm.
marked := info-str.
unmarked := info-str.
focus := marked.
topic := marked.


png :+ [ PERNUM pernum,
	 GEND gender ].

pernum := *top*.
1st := non-3sg.
2nd := non-3sg & are.
3rd := pernum.
sg := pernum.
pl := non-3sg & are.
non-3sg := pernum.
are := pernum.
was := pernum. 
1sg := 1st & sg & was.
2sg := 2nd & sg.
3sg := 3rd & sg & was.
1pl := 1st & pl.
2pl := 2nd & pl.
3pl := 3rd & pl.


basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; For the analysis of inverted yes-no questions, we add the feature INV.

verb :+ [ INV bool ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc

;;; Person

;person := *top*.
;non-3rd := person.
;non-2nd := person.
;3rd := non-2nd.
;2nd := non-3rd.
;1st := non-3rd & non-2nd.

;;; Number

;number := *top*.
;sg := number.
;pl := number.

;;; Gender

gender := *top*.
masc := gender.
fem := gender.
neut := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
prp := nonfinite.
base := nonfinite.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

prog := aspect.
no-aspect := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

common-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SPR < [ OPT-CS type-id ] >,
		   CONT.HOOK.INDEX.PNG.PERNUM 3rd ]].



; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

mass-noun-lex := common-noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ LOCAL.CAT.HEAD.COUNT - ] > ].

count-noun-lex := common-noun-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT.VAL.SPR < [ LOCAL.CAT.HEAD.COUNT + ] > ].


pronoun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SPR < [ OPT + ] >,
		   CONT.HOOK.INDEX [ COG-ST in-foc,
				   SPECI + ]]].

1sg-nom-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
                   CONT.HOOK.INDEX.PNG.PERNUM 1sg ]].

1sg-acc-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.HOOK.INDEX.PNG.PERNUM 1sg ]].

2nd-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2nd ].

3sg-fem-nom-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
                   CONT.HOOK.INDEX.PNG [ PERNUM 3sg,
					 GEND fem ] ] ].

3sg-masc-nom-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
                   CONT.HOOK.INDEX.PNG [ PERNUM 3sg,
                                         GEND masc ] ] ].

3sg-fem-acc-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.HOOK.INDEX.PNG [ PERNUM 3sg,
                                         GEND fem ] ] ].

3sg-masc-acc-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.HOOK.INDEX.PNG [ PERNUM 3sg,
                                         GEND masc ] ] ].

3sg-neut-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3sg,
                                       GEND neut ] ].

1pl-nom-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
                   CONT.HOOK.INDEX.PNG [ PERNUM 1pl ] ] ].

1pl-acc-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.HOOK.INDEX.PNG [ PERNUM 1pl ] ] ].

3pl-nom-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
                   CONT.HOOK.INDEX.PNG [ PERNUM 3pl ] ] ].

3pl-acc-pronoun-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.HOOK.INDEX.PNG [ PERNUM 3pl ] ] ].

;;; Verbs

; All verbs start off as not inverted.

verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb &
                          [ INV - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ INFLECTED -,
    SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

trans-verb-lex := nom-acc-transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

intrans-verb-lex := nom-intransitive-verb-lex.

opt-trans-verb-lex := nom-acc-transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT-CS type-id ].

clausal-comp-verb-lex := main-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & 
				 [ LOCAL.CAT [ HEAD +vc & [ FORM finite ],
					       VAL [ SUBJ < >,
						     COMPS < > ]]] >,
    ARG-ST.REST.FIRST #comps ].

prop-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SF prop ].


ques-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD comp,
					     CONT.HOOK.INDEX.SF ques ]].


;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun &
                                  [ CASE #case ] ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < >,
                                 SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ],
                           HEAD verb &
                                [ AUX - ] ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.  Be sure to put in a comment.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [  ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

do-aux-aux-lex := subj-raise-aux-no-pred &
  [ INFLECTED -,
    SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM base ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.  Be sure to put in a comment.

be-aux-aux-lex := subj-raise-aux-no-pred & fp-rule-dtr &
  [ INFLECTED +,
    SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM prp ] ].

am-aux-lex := be-aux-aux-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1sg ]] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].

is-aux-lex := be-aux-aux-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3sg ]] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].


are-aux-lex := be-aux-aux-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM are ] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].

was-aux-lex := be-aux-aux-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM was ]] >,
		   CONT.HOOK.INDEX.E [ TENSE past ]]].

were-aux-lex := be-aux-aux-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM are ] >,
		   CONT.HOOK.INDEX.E [ TENSE past ]]].





; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.  Be sure to put in a comment.

will-aux-aux-lex := subj-raise-aux-no-pred & fp-rule-dtr &
  [ INFLECTED +,
    SYNSEM.LOCAL.CAT [ HEAD.FORM finite,
		       VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
					       CAT.HEAD.FORM base ] ]].

can-aux := basic-verb-lex & trans-first-arg-raising-lex-item-1 & fp-rule-dtr &
  [ INFLECTED +,
    SYNSEM.LOCAL.CAT [ VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                       HEAD verb &
                            [ AUX +,
                              FORM finite,
                              INV - ] ],
    ARG-ST < #subj &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun & [ CASE nom ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [  ] >,
                                 COMPS < > ],
                           HEAD verb &
                               [ AUX -,
                                 FORM base ] ] ] > ] .

;;; Copulae

copula-verb-lex := verb-lex & trans-first-arg-raising-lex-item-2 & fp-rule-dtr &
  [ INFLECTED +,
    SYNSEM.LOCAL [ CAT [ HEAD.AUX +,
			 VAL [ SUBJ < #subj >,
			       COMPS < #comps >,
			       SPR < >,
			       SPEC < > ]],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD +jp ] ] > ].


id-copula-verb-lex := verb-lex & transitive-lex-item & basic-verb-lex & fp-rule-dtr &
  [ INFLECTED +,
    SYNSEM [ LKEYS.KEYREL.PRED "_be_v_id_rel",
	     LOCAL.CAT [ HEAD.AUX +,
			 VAL [ SUBJ < #subj >,
			       COMPS < #comps > ]]],
    ARG-ST < #subj &
	     [ LOCAL.CAT.HEAD noun & [ CASE nom ]],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun & [ CASE acc ]]] > ].

cop-am-aux-lex := copula-verb-lex &
 [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1sg ]] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].


cop-is-aux-lex := copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3sg ]] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].

cop-are-aux-lex := copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM are ] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].

cop-was-aux-lex := copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM was ]] >,
		   CONT.HOOK.INDEX.E [ TENSE past ]]].

cop-were-aux-lex := copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM are ] >,
		   CONT.HOOK.INDEX.E [ TENSE past ]]].



id-cop-am-aux-lex := id-copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1sg ]] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].

id-cop-is-aux-lex := id-copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3sg ]] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].


id-cop-are-aux-lex := id-copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM are ] >,
		   CONT.HOOK.INDEX.E [ TENSE present ]]].

id-cop-was-aux-lex := id-copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM was ]] >,
		   CONT.HOOK.INDEX.E [ TENSE past ]]].

id-cop-were-aux-lex := id-copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM are ] >,
		   CONT.HOOK.INDEX.E [ TENSE past ]]].


;;; Others

;;; Complementizers

comp-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp,
		       VAL [ SUBJ < >,
			     SPR < >,
			     COMPS < #comps &
				     [ LOCAL.CAT [ HEAD verb & [ FORM finite ],
						   VAL.SUBJ < > ]] > ]],
    ARG-ST < #comps > ].

prop-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop ].

ques-comp-lex-item := comp-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

det1-determiner-lex := determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act ].

det2-determiner-lex := determiner-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.COUNT +,
		       VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX [ COG-ST type-id,
							      PNG.PERNUM sg ]]].


demonstrative_a_rel := predsort.
proximal+dem_a_rel := demonstrative_a_rel. ; close to speaker
distal+dem_a_rel := demonstrative_a_rel.   ; away from speaker
remote+dem_a_rel := distal+dem_a_rel.      ; away from speaker and hearer
hearer+dem_a_rel := distal+dem_a_rel.      ; near hearer

determiner-lex-supertype := norm-hook-lex-item & basic-zero-arg &
  [ SYNSEM [ LOCAL [ CAT [ HEAD det,
			   VAL[ SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX #ind,
				  			     LTOP #larg ],
                                SPR < >,
                                SUBJ < >,
                                COMPS < >]],
		     CONT.HCONS < ! qeq &
				 [ HARG #harg,
				   LARG #larg ] ! > ], 
	     LKEYS.KEYREL quant-relation &
		   [ ARG0 #ind,
		     RSTR #harg ] ] ].


demonstrative-det-lex := determiner-lex-supertype &
  [ SYNSEM [ LOCAL [ CAT.VAL.SPEC < [ LOCAL.CONT.HOOK [ INDEX #arg1 &
							      [ COG-ST activ+fam ],
							LTOP #lbl ]] >,
		     CONT.RELS <! [ PRED "exist_q_rel" ], #altkeyrel !> ],
	     LKEYS.ALTKEYREL #altkeyrel & arg1-ev-relation &
			     [ LBL #lbl,
			       ARG1 #arg1 ]]].

demonstrative-sg-determiner-lex := demonstrative-det-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM sg ].

demonstrative-pl-determiner-lex := demonstrative-det-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

number-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule & fp-rule-dtr &
  [ DTR count-noun-lex ].

sg-lex-rule := const-ltow-rule & number-lex-rule &
  [ SYNSEM.LOCAL [ CAT.VAL.SPR < [ OPT - ] >,
		   CONT.HOOK.INDEX.PNG.PERNUM sg ]].

pl-lex-rule := infl-ltow-rule & number-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl ].

non-fin-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule &
  [ DTR main-verb-lex ].

prp-lex-rule := infl-ltow-rule & non-fin-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT prog,
                   CAT.HEAD.FORM prp ] ].

base-lex-rule := const-ltow-rule & non-fin-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM base ].

png-tense-lex-rule := lexeme-to-word-rule & add-only-no-ccont-rule & fp-rule-dtr & 
  [ SYNSEM.LOCAL.CAT.HEAD.FORM finite,
    DTR verb-lex ].

png-tense-morph1-lex-rule := infl-ltow-rule & png-tense-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE present,
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3sg ] ] ].

png-tense-morph2-lex-rule := const-ltow-rule & png-tense-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE present,
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM non-3sg ] ] ].

png-tense-morph4-lex-rule := infl-ltow-rule & png-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

; Rule for inverted subject verb order in questions.
; The incompatible SUBJ values on SYNSEM and DTR are
; what keeps this one from spinning.

subj-v-inv-lrule := cat-change-only-lex-rule & same-hc-light-lex-rule & same-posthead-lex-rule & constant-lex-rule & nocoord & lexeme-to-lexeme-rule &
  [ SYNSEM [ LOCAL.CAT [ HEAD verb &
                              [ INV + ],
                         VAL [ COMPS < #subj & [ OPT - ] . #comps >,
                               SUBJ < >,
                               SPR #spr,
                               SPEC #spec ],
                         MC na ],
             LKEYS #lkeys ],
    DTR.SYNSEM [ LOCAL.CAT [ HEAD.AUX +,
			     VAL [ SUBJ < #subj >,
                                 COMPS #comps,
                                 SPR #spr,
                                 SPEC #spec ] ],
                 LKEYS #lkeys ] ].


;;; Adjectives

adjective-lex := basic-adjective-lex & intersective-mod-lex &
	      norm-ltop-lex-item &
  [ SYNSEM [ LKEYS.KEYREL.ARG0 #ind,
	     LOCAL [ CONT.HOOK [ INDEX #ind,
				 XARG #xarg ],
		     CAT [ HEAD.MOD < [ LOCAL [ CONT.HOOK.INDEX #xarg,
						CAT [ HEAD noun,
                                                    VAL.SPR cons ]]] >,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ],
			   POSTHEAD - ]]]].

;;; Adverbs

adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ VAL [ SUBJ cons,
							  COMPS < > ],
						    HEAD verb ] ]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ],
			   POSTHEAD + ]]]].


;;; Adpositions

adposition-lex := basic-adposition-lex & intersective-mod-lex & norm-ltop-lex-item &
  [ SYNSEM [ LKEYS.KEYREL [ ARG0 #arg0,
			    ARG1 #xarg,
			    ARG2 #ind ],
	     LOCAL [ CONT.HOOK [ XARG #xarg,
				 INDEX #arg0 ],
		     CAT [ HEAD.MOD < [ LOCAL [ CAT [ HEAD noun,
						      VAL.SPR cons ],
						CONT.HOOK.INDEX #xarg ]] >,
			   VAL [ SPR < >,
			     COMPS < [ LOCAL [ CAT [ HEAD noun,
						     VAL.SPR < > ],
					       CONT.HOOK.INDEX #ind ]] >,
				 SUBJ < > ]]]]].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

; ERB 2010-2-26 Using OPT-CS on SPR to stash "type-id" on common nouns,
; while pronouns directly say "in-foc".

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !>,
    HEAD-DTR.SYNSEM.LOCAL [ CONT.HOOK.INDEX.COG-ST #cog-st,
			    CAT.VAL.SPR < [ OPT-CS #cog-st ] > ]].

; This rule takes [MC na] inverted phrases and licensesthem as main clauses with question semantics.
; 

int-cl := interrogative-clause & head-only &
  [ SYNSEM.LOCAL.CAT [ HEAD.INV +,
                       VAL #val,
                       MC + ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ MC na,
                                VAL #val &
                                    [ SUBJ < >,
                                      COMPS < > ] ],
    C-CONT.HOOK.INDEX.SF ques ].

;;; Negation

neg-add-lex-rule := local-change-only-lex-rule & same-ctxt-lex-rule & same-agr-lex-rule & same-head-lex-rule & same-hc-light-lex-rule & same-posthead-lex-rule & constant-lex-rule & nocoord &
  [ SYNSEM.LOCAL [ CAT [ HEAD #head,
			 VAL [ SUBJ #subj,
			       SPR #spr,
			       SPEC #spec,
			       COMPS < [ LOCAL [ CAT.HEAD adv,
						 CONT [ HOOK [ INDEX #negind,
							       LTOP #negltop ],
							HCONS <! [ LARG #larg ] !> ] ],
					 LKEYS.KEYREL.PRED "_neg_r_rel" ] . #comps > ] ],
		   CONT.HOOK [ INDEX #negind,
			       LTOP #negltop,
			       XARG #xarg ] ],
    DTR png-tense-lex-rule &
      [ SYNSEM.LOCAL [ CONT.HOOK [ LTOP #larg,
				   XARG #xarg ],
		       CAT [ VAL [ SUBJ #subj,
				   SPR #spr,
				   SPEC #spec,
				   COMPS #comps ],
			     HEAD #head & verb &
				 [ AUX + ] ] ] ] ] .

; Type for negative adverbs.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
		       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT.HEAD verb & [ FORM nonfinite ] ] > ] ] .


; This lexical rule adds the neg_r_rel to the verb's
; RELS list.  It is instantiated by a spelling-changing
; rule as specified in irules.tdl.
; 
; This rule applies only to auxiliaries.

neg-infl-lex-rule := cont-change-only-lex-rule & inflecting-lex-rule & nocoord &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS <! event-relation &
                     [ PRED "_neg_r_rel",
                       LBL #ltop,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !> ],
    SYNSEM.LKEYS #lkeys,
    DTR png-tense-lex-rule &
        [ SYNSEM [ LKEYS #lkeys,
                   LOCAL [ CONT.HOOK [ XARG #xarg,
                                       INDEX #ind,
                                       LTOP #larg ],
                           CAT.HEAD verb & [ AUX + ] ] ] ] ] .



;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM pl,
		   COORD-STRAT "1" ]].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PERNUM pl,
		   COORD-STRAT "1" ]].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD [ INV -,
			      FORM #form ],
		   COORD-STRAT "1" ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.FORM #form,
    RCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.FORM #form ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ CAT.HEAD.FORM #form,
		   COORD-STRAT "1" ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT.HEAD.FORM #form ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD [ INV -,
			      FORM #form ],
		   COORD-STRAT "1" ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.FORM #form,
    RCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.FORM #form ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ CAT.HEAD.FORM #form,
		   COORD-STRAT "1" ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT.HEAD.FORM #form ].

;;; Focus

fp-lex-rule := infl-add-only-no-ccont-ltol-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.INFO-STR focus,
    DTR fp-rule-dtr ].

fp-rule-dtr := word-or-lexrule.
